rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /companyMOA/{document=**} {
      allow read, write: if request.auth != null;
      
      // Validation rules for company MOA documents
      allow create, update: if request.auth != null &&
        request.resource.data.companyName is string &&
        request.resource.data.companyName.trim().size() > 0 &&
        request.resource.data.companyAddress is string &&
        request.resource.data.companyAddress.trim().size() > 0 &&
        request.resource.data.companyLongitude is string &&
        request.resource.data.companyLatitude is string &&
        request.resource.data.moaYear is number &&
        request.resource.data.moaStatus in ['Active', 'For-Update', 'Blacklisted', 'On process'] &&
        request.resource.data.companyType is string &&
        request.resource.data.companyType.trim().size() > 0 &&
        request.resource.data.college is string &&
        request.resource.data.college.trim().size() > 0 &&
        request.resource.data.department is string &&
        request.resource.data.department.trim().size() > 0 &&
        request.resource.data.moaValidity is number &&
        request.resource.data.validityUnit in ['years', 'months'] &&
        request.resource.data.moaExpirationDate is string &&
        request.resource.data.moaRemarks is string &&
        request.resource.data.withExpiration is bool &&
        request.resource.data.createdAt is string &&
        request.resource.data.updatedAt is string;
        
      allow delete: if request.auth != null;
    }
    // Specific rules for the agreementform collection
    match /agreementform/{document=**} {
      allow read, write: if request.auth != null;
      
      // Allow updates with specific valid values
      allow update: if request.auth != null &&
        request.resource.data.status in ['active', 'pending', 'expired', 'inactive', 'renewed'] &&
        request.resource.data.keys().hasAll(['status', 'updatedAt']);
      
      // Validation rules for updates
      allow update: if request.auth != null &&
        request.resource.data.name is string &&
        request.resource.data.address is string &&
        request.resource.data.signedBy is string &&
        request.resource.data.designation is string &&
        request.resource.data.agreementType in ['MOU', 'MOA'] &&
        request.resource.data.partnerType in ['Industry', 'Academe', 'Government'] &&
        request.resource.data.dateSigned is string &&
        request.resource.data.validity is number &&
        request.resource.data.dateExpired is string &&
        request.resource.data.status in ['active', 'expired', 'pending', 'renewed'] &&
        request.resource.data.description is string &&
        request.resource.data.remarks is string &&
        request.resource.data.updatedAt is string;
    }
    match /users/{userId} {
      // Allow reading user data
      allow read: if true;
      
      // Allow creation of new user accounts without requiring auth
      allow create: if 
        // Required fields
        request.resource.data.keys().hasAll([
          'uid',
          'email', 
          'firstName', 
          'lastName', 
          'role', 
          'createdAt', 
          'status',
          'lastLogin',
          'updatedAt'
        ]) &&
        // Field validations
        request.resource.data.uid is string &&
        request.resource.data.uid.size() > 0 &&
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$') &&
        request.resource.data.firstName is string &&
        request.resource.data.firstName.trim().size() > 0 &&
        request.resource.data.lastName is string &&
        request.resource.data.lastName.trim().size() > 0 &&
        request.resource.data.role == 'user' &&
        request.resource.data.status == 'active' &&
        request.resource.data.createdAt is string &&
        request.resource.data.updatedAt is string &&
        request.resource.data.lastLogin == null;
      
      // Allow users to update their own data only when authenticated
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.uid &&
        request.resource.data.role == resource.data.role;
      
      allow delete: if false;
    }

    // Other collections require authentication
    match /{collection}/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
} 